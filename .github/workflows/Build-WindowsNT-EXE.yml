name: 将main.py打包成EXE文件
on: [push]
jobs:
  Build-The-EXE:
    runs-on: windows-latest
    steps:
      - run: echo "这是个${{ github.event_name }}事件."
      - run: echo "这个Actions运行在Github的${{ runner.os }}服务器上"
      - run: echo "这个Actions的分支是${{ github.ref }}，该Actions的仓库名是${{ github.repository }}."
      - name: 开始检查仓库代码
        uses: actions/checkout@v3
      - name: 列出仓库文件
        run: dir ${{ github.workspace }}
      - name: 尝试安装Python
        uses: actions/setup-python@v3
      - name: 尝试安装FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v1
      - name: 尝试安装Python版的pyinstaller
        run : python -m pip install pyinstaller
      - name: 尝试安装requirements给出的必要库名
        run : python -m pip install -r ${{ github.workspace }}/requirements.txt
      - name : 开始生成打包文件
        run : pyinstaller -F ${{ github.workspace }}/main.py
      - name: 列出打包后的仓库文件
        run: dir ${{ github.workspace }};echo "以下是克隆仓库中的dist文件夹";dir ${{ github.workspace }}/dist
      - name : 将打包完的exe文件复制到原目录下
        run: mv ${{ github.workspace }}/dist/main.exe ${{ github.workspace }}
      #- name : 开始上传文件
        #uses: actions/upload-artifact@v2
        #with:
          #name: The-Pyinstaller-for-Actions-Make-EXE
          #path: ${{ github.workspace }}
      - name : 将仓库打包成压缩文件
        run : 7z a -tzip ${{ github.workspace }}/The-Pyinstaller-for-Actions-Make-EXE.zip ${{ github.workspace }}/* -mx0
      - name: 创建Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release The-Pyinstaller-for-Actions-Make-EXE ${{ github.ref }}
          draft: false
          prerelease: false
      - name: 上传Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ github.workspace }}/The-Pyinstaller-for-Actions-Make-EXE.zip
          asset_name: The-Pyinstaller-for-Actions-Make-EXE.zip
          asset_content_type: application/zip
      - run: echo "这份Actions最终的状态是${{ job.status }}."